# 2023/04/03 Melissa England RARE-1033
# OPENSHIFT3.11 REQUIRES OLD ANSIBLE 2.6 ... run it on TOOLBOX
# https://github.com/openshift/openshift-ansible/issues/11628
ansible --version

## all these commands are adhoc for the commandline - this is not a script

#### Note #### there is a second script which captures more certs in OC that this script does not look for.
# $ sh list_ssl_secrets.sh > ssl_secrets_iad.`date +%F`.txt

# This is the branch I created based on branch "release-3.11" 
$ git clone git@github.com:raxtes/openshift-ansible.git --branch list-ssl-3.11
$ git branch
* list-ssl-3.11

# Run Ansible to see what certs are expiring
# Make sure you are logged in with oc to the desired DC
$ time ansible-playbook -Ki lon3 playbooks/openshift-checks/certificate_expiry/easy-mode.yaml -e "my_date=`date +%Y%m%dT%H%M%S`"
$ time ansible-playbook -Ki iad3 playbooks/openshift-checks/certificate_expiry/easy-mode.yaml -e "my_date=`date +%Y%m%dT%H%M%S`"
$ time ansible-playbook -Ki ord1 playbooks/openshift-checks/certificate_expiry/easy-mode.yaml -e "my_date=`date +%Y%m%dT%H%M%S`"

# script places the file in ~ home
$ ll ~/cert-expiry-report*

# Set this var to the correct report for convenience
$ export REPORT='cert-expiry-report.......json'


#######################################################

# what kind of data here
$ cat $REPORT | egrep '^      "' | awk -F'"' '{print $2}' | sort | uniq -c
     34 etcd
     34 kubeconfigs
     34 meta
     34 ocp_certs
     34 registry
     34 router

# Total Summary Total
$ cat $REPORT | jq '.summary'
{
  "expired": 6,
  "ok": 62,
  "total": 175,
  "warning": 107
}

# see keys/sections/nodenames
$ cat $REPORT | jq '.[] | keys'

#######################################################
# Expired Certs - based on when the report ran (the file paths might be on master, etcd, nodes, etc.)
$ cat $REPORT | jq '.[][] | .etcd[],.kubeconfigs[],.ocp_certs[],.registry[],.router[] | (select (.health | test("expired"))) | {expiry,cert_cn,issuer,path}' -c | sort | uniq | jq -c

#######################################################
# Search by Expiry Date REGEX (the file paths might be on master, etcd, nodes, etc.)
$ export EXPIRY='2023-0[1-3]'; cat $REPORT | jq '.[][] | .etcd[],.kubeconfigs[],.ocp_certs[],.registry[],.router[] | (select (.expiry | test("'$EXPIRY'"))) | {expiry,cert_cn,issuer,path}' -c | sort | uniq | jq -c

#######################################################
# List ALL - only dates
$ cat $REPORT | jq '.[][] | .etcd[],.kubeconfigs[],.ocp_certs[],.registry[],.router[] | .expiry' -r | awk '{print $1}' | sort | uniq -c

#######################################################
# List ALL - only paths
$ cat $REPORT | jq '.[][] | .etcd[],.kubeconfigs[],.ocp_certs[],.registry[],.router[] | .path' -r | sort | uniq -c

#######################################################
# List ALL - only cert names
$ cat $REPORT | jq '.[][] | .etcd[],.kubeconfigs[],.ocp_certs[],.registry[],.router[] | .cert_cn' -r | sort | uniq -c

#######################################################
# List ALL - only issuer names
$ cat $REPORT | jq '.[][] | .etcd[],.kubeconfigs[],.ocp_certs[],.registry[],.router[] | .issuer' -r | sort | uniq -c

#######################################################
# List ALL 
$ cat $REPORT | jq '.[][] | .etcd[],.kubeconfigs[],.ocp_certs[],.registry[],.router[] | {cert_cn,issuer,path,expiry}' -c | sort | uniq | jq -c

# Count ALL - UNIQUE
$ cat $REPORT | jq '.[][] | .etcd[],.kubeconfigs[],.ocp_certs[],.registry[],.router[] | {cert_cn,issuer,path,expiry}' -c | sort | uniq | wc -l
59

# Count ALL - NON UNIQUE
$ cat $REPORT | jq '.[][] | .etcd[],.kubeconfigs[],.ocp_certs[],.registry[],.router[] | {cert_cn,issuer,path,expiry}' -c | wc -l
175

======================================================

